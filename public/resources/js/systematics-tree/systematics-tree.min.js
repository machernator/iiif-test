const SystematicsTree=(e,t)=>{let n,o,r,c,s,d,a,i,l,u,h,f;const p={core:{core:{themes:{stripes:!0,icons:!1}},data:{url:function(e){const t="#"==e.id?"#":e.li_attr["data-entryid"];return"#"===t?d+"0":d+t},data:function(e){return{id:e.id}}},plugins:["wholerow","changed"]}};function m(e,t){if(void 0!==S)if(S.length>1)y(b+S[D].NODE_ID);else if(1===S.length){const e=b+S[D].NODE_ID;n.jstree("select_node",e,!0),document.getElementById(e).scrollIntoView({block:"center"})}}function y(e){n.jstree("open_node",e,_)}function _(){if(D++,D<I&&y(b+S[D].NODE_ID),D===I||1===I){const e=b+S[D].NODE_ID;n.jstree("select_node",e,!0),document.getElementById(e).scrollIntoView({block:"center"})}}function E(e,t){if("ready"===t.action)return;const o=t.node,r=o?o.li_attr["data-entryid"]:"",c={...s,jsTree:n,selectedNode:o,entryId:r,action:null};"select_node"===t.action?(o.children_d.length>0&&(o.children_d.forEach((function(e,t){const o=n.jstree("get_node",e);n.jstree("is_checked",o)&&n.jstree("uncheck_node",o)})),n.jstree("check_node",o)),c.action="select_node",a(r,t.instance.get_path(o," / "),c)):"deselect_node"===t.action&&(c.action="deselect_node",a(r,t.instance.get_path(o," / "),c))}function g(e){const t=e.target.closest("li"),o=t.dataset.entryid,r=t.innerText,c={...s,jsTree:n,selectedNode:null,entryId:o,action:"select_node"};a(o,r,c),j()}function v(e){return e.target.closest("#thesaurusSearchResult")||j(),!1}function w(e){"Escape"==e.key&&l.hide()}function L(){const e=i.value.trim();if(e){const t=new FormData;t.append("search",e),showLoadingAnimation(i);(async function(e){const t=await fetch(f,{method:"POST",body:e}),n=await t.text();u.innerHTML=n,document.body.addEventListener("pointerup",v),document.addEventListener("keyup",w),l.show(),hideLoadingAnimation()})(t)}}function j(){document.removeEventListener("keyup",w),document.body.removeEventListener("pointerup",v),l.hide(),i.focus()}let D=0,I=0;const S=window.treePath;void 0!==S&&(I=S.length-1);let b="thes_";return function(e,t){if(r=e,c=document.getElementById(r),!c)return null;n=$(c).find("[data-treeselect]");const y=c.dataset.selectiondata||"{}";try{s=JSON.parse(y)}catch(e){s={}}a=t,d=n.data("treeurl"),f=n.data("searchurl");const _=c.querySelector("[data-searchform]");if(_){if(i=_.querySelector("[data-searchfield]"),"FORM"===_.tagName)_.addEventListener("submit",(e=>{e.preventDefault(),L()}));else{_.querySelector('button[type="submit"]').addEventListener("pointerup",(e=>{e.preventDefault(),L()}))}i.addEventListener("keydown",(e=>{"Enter"===e.key&&(e.preventDefault(),L())})),l=new bootstrap.Collapse(`#${_.id} .nhm-search-result`,{toggle:!1}),u=l._element,u.addEventListener("pointerup",g),u.addEventListener("hidden.bs.collapse",(e=>{u.innerHTML=""}))}o=n.jstree(p),o.on("changed.jstree",E),o.on("loaded.jstree",m),h=document.querySelectorAll("[data-reset]"),h.forEach((e=>e.addEventListener("pointerup",(function(e){o.close_all()}))))}(e,t),{tree:n,wrapper:c}};window.SystematicsTree=SystematicsTree;export{SystematicsTree as default};
//# sourceMappingURL=systematics-tree.min.js.map